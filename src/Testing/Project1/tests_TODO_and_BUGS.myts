//TODO EN GENERAL: que las pruebas impriman un mensaje facil de leer
//                 y que sean automaticas y facil de correr todas al mismo tiempo
//cuando pasan y cuando no

{
    console = null;//Deberia de tronarse la consola :s
    console.log("a");//no deberia de funcionar
}

//algo que testee que sea posible sobreescribir el console
{
    let console:number = 10;
    console.log("Javier");//Deberia de dar error
}

// I DONT EVEN KNOW WHAT THE FUCK HAPPENS HERE BUT IT SHOULD BE TESTED
// it might even be a problem
{
    type A = {
        a:number,
        b:number
    }

    function setParam(a:number):void{
        a = 10;
    }

    let myA = { a:10, b:undefined };

    console.log(myA.b);//no longer prints undefined
    console.log(myA.c);//prints undefinded??????

    setParam(myA.b);
    setParam(myA.c);

    // we could set the params like this too???
    // myA.b = 10;
    // myA.c = 10;

    console.log(myA.b);//no longer prints undefined
    console.log(myA.c);//prints undefinded??????
}

//algo que testee que sea posible sobreescribir el console
{
    let console:number = 10;
    console.log("Javier");//Deberia de dar error
}

//Algo que verifique si se tira error cuando se llama una funcion
//con un custom type o con array


//Pruebas de + con string
{
    //Number
    console.log("*******************Number*******************");
    let num = 10;
    let a = num + "s";
    console.log(a);
    let b = "s" + num;
    console.log(b);

    //String
    console.log("*******************String*******************");
    let s = "10";
    let c = s + "s";
    console.log(c);
    let d = "s" + num;
    console.log(d);

    //Boolean
    console.log("*******************Boolean*******************");
    let bool = true;
    let e = bool + "s";
    console.log(e);
    let f = "s" + bool;
    console.log(f);

    //null
    console.log("********************null********************");
    let _null = null;
    let g = _null + "s";
    console.log(g);
    let h = "s" + _null;
    console.log(h);   

    //undefined
    console.log("******************undefined******************");
    let _undefined = undefined;
    let i = _undefined + "s";
    console.log(i);
    let j = "s" + _undefined
    console.log(j);   

    //console
    console.log("*******************console*******************");
    let _my_console = console;;
    let k = _my_console + "s";
    console.log(k);
    let l = "s" + _my_console;
    console.log(l);

    //Array
    console.log("*******************Array********************");
    let myArray:Array<string> = ["10", "10"];
    let m = myArray + "s";//string
    console.log(m);
    let n = "s" + myArray;//string
    console.log(n);

    //Custom
    console.log("*******************Custom*******************");
    type A = {
        a:number,
        b:number
    }
    let myType:A = { a: 10, b: 10 };
    let o = "s" + myType;//string
    console.log(o);
    let p = myType + "s";//string
    console.log(p);

    //EmptyArray
    console.log("****************EmptyArray*****************");
    let myEmptyArray:Array<string> = [];
    let q = myEmptyArray + "s";//string
    console.log(q);
    let r = "s" + myEmptyArray;//string
    console.log(r);
}

//Probar que los los MyType se pasen por referencia
//sin importar si vinieron de un member access
{

    type A = {
        a:number,
        b:number
    }
    type B = {
        a:number,
        b:A
    }
    let myType:A = { a: 10, b: 10 };
    let o = "s" + myType;//string
    console.log(o);
    let p = myType + "s";//string
    console.log(p);
}
//TODO: hacer la prueba anterior para arreglos tambien

//TODO: Probar que las definiciones de tipos puedan venir en 
//desorden y que puedan ser circulares


//TODO: Probar que las dos expresiones en un operacion de potencia (**)
//se calculen de derecha a izquierda (no solo es que se parceen de derecha
//a izquierda, tambien  se tienen que calcular de derecha a izquierda)

//TODO: Poner expresiones aritmeticas super largas (ver pruebas de compi 1)

//TODO: Poner expresiones en las que - unario y - binario pueden dar problema


//Probar que poner en null otra variable con el mismo objeto no afecte a la
//variable original
{
    type A = {
        a:string,
        b:number
    }

    let a:A = { a:"Javier", b:1 };
    let b = a;
    b = null;
    console.log(a);//No deberia de imprimir null
}

//IMPORTANTE: que la comparacion con el literal null y una variable que fue
//asignada a null si funcione bien!
{
    type A = {
        a:string,
        b:number
    }

    let a:A = { a:"Javier", b:1 };
    a = null;
    if(a == null){
        console.log(true);
    }
    console.log(a);//No deberia de imprimir null
}

//Que pase los member access por referencia tambien
{
    //TODO: ponerle mejores nombres
    type A = {
        a:B,
        b:number
    }
    type B = {
        a:string
    }
    
    function nullify(b:B){
        b = null;
    }

    let b:B = {
        a:"Javier"
    }
    let a:A = {
        a:b,
        b:10
    }

    nullify(a.a);
    console.log(a.a);//Deberia de imprimir null
}

//TODO: 'formalizar' esta prueba
{
    //this, somehow prints: [ null, null, null, null, null, null, null, null, null, null ]
    let anArray:number[] = [];
    anArray.length = 10;
    console.log(anArray);
}
  
{
    [10] = [1,2,3,4];//deberia ser un error
    [10, 10].length = 10;//No deberia ser error

}

{
    let anArray:number[]
    console.log(anArray = [10, 2, 3]);//esto imprime el arreglo
}

{
    console.log(let anArray:number[] = [10, 2, 3]);//Pero las declaraciones no pueden ser expresion
}

//TODO: algo que revice si el operator precedence de '=' al hacer assignment es correcto

{
    type A = {
        a:string,
        b:string
    }
    type B = {
        a:string,
        b:string
    }

    function test(a:A){
        console.log(a);
    }

    let b:B = {a:"Javier", b:"Antonio"};
    test(b);//Esto NO debe dar error de tipos
}

{
    type A = {
        a:string,
        b:string
    }

    function test1(a:A){
        console.log(a);
    }

    test({a:"Javier", b:"Javier"});//Esto NO debe dar error de tipos
}

{
    type A = {
        a:string,
        b:string
    }

    let a = ({a:"Javier", b:"Javier"});//Should work
}
{
    type A = {
        a:number,
        b:B
    }
    type B = {
        a:A,
        b:number
    }
}

{
    function A(){
        B();
    }
    function B(){
        A();
    }
}

// Truthiness porque typescript es una mierda:
{
    if(true){
        console.log("PASS");
    }
    else{
        console.log("FAIL");
    }
    if(!(false)){
        console.log("PASS");
    }
    else{
        console.log("FAIL");
    }

    if(10){//Any non 0 number
        console.log("PASS");
    }
    else{
        console.log("FAIL");
    }
    if(!(0)){
        console.log("PASS");
    }
    else{
        console.log("FAIL");
    }

    if(!('')){
        console.log("PASS");
    }
    else{
        console.log("FAIL");
    }
    if('false'){//i.e. any other string
        console.log("PASS");
    }
    else{
        console.log("FAIL");
    }

    if(!(null)){//null is never true
        console.log("PASS");
    }
    else{
        console.log("FAIL");
    }

    if(!(undefined)){//undefined is never true
        console.log("PASS");
    }
    else{
        console.log("FAIL");
    }

    if([]){//any array empty or not is never false
        console.log("PASS");
    }
    else{
        console.log("FAIL");
    }

    if({}){//any object empty or not is never false
        console.log("PASS");
    }
    else{
        console.log("FAIL");
    }
}

// About truthiness
// copied from: https://medium.com/coding-in-simple-english/what-are-truthy-values-in-javascript-e037bdfa76f8
// might be useful in one way or another
{
    const empty = {}
    empty ? "truthy" : "falsy"; // truthy

    [] ? "truthy" : "falsy"; // truthy

    0 ? "truthy" : "falsy"; // falsy
    37 ? "truthy" : "falsy"; // truthy

    false ? "truthy" : "falsy"; // falsy
    true ? "truthy" : "falsy"; // truthy

    0n ? "truthy" : "falsy"; // falsy
    37n ? "truthy" : "falsy"; // truthy

    "" ? "truthy" : "falsy"; // falsy
    "any string" ? "truthy" : "falsy"; // truthy

    null ? "truthy" : "falsy"; // falsy
    undefined ? "truthy" : "falsy"; // falsy
}

//TODO: Una declarion que verifique que si se haga bien la compativilidad de tipos entre
//Customs

//TODO: Una declarion que verifique que si se haga bien la compativilidad de tipos entre
//Arrays

//Probar que no el simbolo como tal sea capas de mantener su tipo
{
    type A = {
        a: string;
        b: string;
    }
    type B = {
        a: number;
        b: number;
    }

    let a:A;
    console.log(a);//deberia de imprimir undefined
    let b:B = { a: 10, b: 10 }
    a = b;//Esto no deberia dar error
}

//Probar que se puedan tener variables y types con el mismo nombre
{
    type A = {
        a: string;
        b: string;
    }

    //This is ok acording to typescript
    let A:A = {a:"", b:""};
}

//TODO: Algo para probar el const

{//no se cual es la respuesta aqui. Depende de lo que digan en el github
    type A = {
        a: string;
        b: string;
    }

    //Esto NO se puede en TypeScript
    let a:A = undefined;

    //Ni esto tampoco
    let b:A = null;

    //Si si se puede en nuestro lenguaje entonces se puede hacer tambien con primitivos
    let c:number = undefined;
    let d:number = null;
    
    let e:string = undefined;
    let f:string = null;
    
    let g:boolean = undefined;
    let h:boolean = null;
}

//TODO: pruebas super anidadas con el member access
//que hagan el acceso y tambien la asignacion

{
    function other_nullify(a:number){
        a = null;
    }

    let array = [10, 10];
    other_nullify(array[0]);
    console.log(array);//Should NOT print null because a[0] is a primitive
}

//TODO: algo que verifique que la asignacion retorne un valor

//NO VALIDO: no se pueden tener typedef adentro de un scope
//No se ni siquiera si esto sirve en typescript. Per
{
    type A = {
        a: string = "Default A";
        b: string = "Dafault A";
    }

    {//
        type A = {
            a: A;//Este A hace referencia al A en este scope
        }
        
        let a:A;
        console.log(a);
    }
}

//BIG BUG: (solved)
//when runStatement catches an error it would return undefined messing up our entire
//system of jumpers. causing graficar_ts(); to never be ran in this case
{
    {
        let a = 10;
        (a = 10) = 20;
        graficar_ts();
    }
}

{
    "a" = "a";
    console.log(a);
}

{
    type string = {//we should print a special error message: it prints a syntax error. Special enough in my opinion
        a:number;
    }
}


{
    type A = {
        a: string;
        b: B;
    }
    type A = {
        a: A;
        b: number;
    }
    //prints: "No se encontro definicion para el tipo: 'B'. Se definira con {} para continuar la ejecucion"
    //deberia de imprimir algo que diga que A tiene dos definiciones
    //SOLVED
}

{
    type A = {
        a: string;
        b: B;
    }
    type B = {
        a: A;
        b: number;
    }

    let a:A = {
        a:"a1", 
        b : { 
            a: {
                a:"a1", 
                b : { 
                    a: {
                        a:"a2", 
                        b: null
                    },
                    b: 30
                }
            },
            b: 20
        }
    };

    console.log(a);

}

//Que no muera todo si no existe el tipo
{
    type A = {
        a: string;
        b: B;
    }
}

//Que los break error get propagated thru function calls
{
    function a_bad_break():void{
        break;
    }

    while(true){
        console.log("Hola!");
        a_bad_break();
        console.log("Si esto no se imprime algo anda mal");
        break;
    }
}

{
    let a:number = 10;
    let b:number = a;

    b = 20;

    console.log(a);//print 10
    console.log(b);//print 20
}

//TODO: Test assignment and declaration with undefined

//TODO: algo que pruebe si no se acepta diferente numero de args a params
//      algo que pruebe si se revisa que los tipos de args sean igual a los de params


//TODO: a good unit test candidate would be compareTypes and those types of functions.
//      it would have to be very thorough to be of any use. And to making it thorough
//      would take time


{
    let a:number = 10;
    let b:number = a;

    b = 20;

    console.log(a);//10
    console.log(b);//20
}


{//this should be an error
    {
        type A ={
            a:string
        }
    }
}

//BUG!!
//SOLVED
{
    type A = {
        a: number,
    }
    let a:A = {a:10};
    let b:A = a;

    a.a = 20;
	a = null;

    console.log(a);//IMPRIME UNDEFINED CUANDO DEBERIA DE IMPRIMIR null
    console.log(b);
}

{
    function hello(a:number):void{
        console.log("Hello " + a);//should print "Hello 10"
        a = null;
    }

    let a = 10;
    hello(a);
    console.log(a);//should print 10
}


//old bug:
//failing test for null bug
//SOLVED
{
    console.log(null);//BUG prints undef
    console.log(undefined);
    let a = null;
    let b = undefined;
    console.log(a);//BUG prints undef
    console.log(b);
}

//TODO: algo que pruebe si corremos los typedefs antes de las funciones

{
    let n:number = 0;

    while(n < 10){
        n = n + 1;
        console.log(n);
        continue;
        console.log("FAIL");
    }
}

//TODO: test return jumpers, empty, not empty, correct, with incorrect type, with incorrect void/not_void
//test jumpers when void. and test that jumpers return the correct type

//TODO: mas de estas:
//Para verificar que regresemos al scope global antes de llamar a las funciones
{
    let b = "PASS";
    function lol():void{
        console.log(a);//undefined
        console.log(b);//PASS
    }

    {
        let a = "FAIL";
        lol();
    }
}

{
    let a:Array<number>[];  
    let b:Array<number[]>;
}

{
    type A = {
        a:C[]
    }
    type B = {
        b:Array<Array<Array<Array<C>>>>;
    }
    type C = {
        c:number;
    }
}

{
    let a:Array<Array<Array<Array<C>>>>;//we should get an error here!
    let b:Array<C>;//we should get an error here!
    let c:C[];//we should get an error here!
    let d:C[][][][];//we should get an error here!
}

{
    console.log([1,2,3,4]);
    console.log([1,2,3,"4"]);//Esto deberia dar error
}

{
    console.log([1,2,3,4]);
    console.log([1,2,3,"4"]);//Esto deberia dar error
}

//TODO: more tests for typechecking arrays
{
    let a:number[] = [1,2,3,"4"];//Esto deberia dar error
}

//TODO: probar que con push se pasen las mierdas por referencia tambien. como cualquier otra funcion

//BUG
//This error would be impossible to catch unless we do some MAYOR changes to the everything
{
    let a = 10;
    {
        let a = a;
        console.log(a);
    }
}

//TODO BIG: Something that tests if we handle the double scope properly AND if we dont fuck up the scope stack if an error occurs on the initial expression
//          see your runFor code


//TODO: something that test if the finalExpression runs outside of the scope of for's block

//this is one of the biggest bugs. second only to the 'symbols dont carry their type bug!'
//BUG: I think... this should be an error but its not
{
    let i = 0;
    for(let i = i; i < 10; i++){//Variable i used before its declaration
        
    }
}
{
    let a = [1,2,3,4];
    for(let a of a){//this is an error
        a = 0;
    }
}


//BUG: this should be an error in TS. But i dont think it is in C. idk
{
    let a =10;
    {
        console.log(a);
        let a = 10;
    }
}

{
    {//(solo funciona en myTs)
        let array = [0,1,2,3,4];
        for(let item of array){
            array = null;
            console.log(item);
        }
        //0 1 2 3 4
    }

    console.log("--------------------");

    {
        let array = [0,1,2,3,4];
        for(let item of array){
            array = [];
            console.log(item);
        }
        //0 1 2 3 4
    }

    console.log("--------------------");

    {
        let array = [0,1,2,3,4];
        for(let item of array){
            console.log(item);
            if(array.length < 10){
                array.push(-1);
            }
        }
        //0 1 2 3 4 -1 -1 -1 -1 -1
    }

    console.log("--------------------");

    {
        let array = [0,1,2,3,4];
        let arrayCopy = array;
        for(let item of array){
            console.log(item);
            arrayCopy.pop();
        }
        //0 1 2
    }
}

//TODO: test to check if the switch case can match multiple cases if it has no break
//TODO: test to check if the default can be anywhere in the switch


{
    console.log(-(1+2));
}


{
    let a = {a:"hello"};
    let b = {a:"hello"};

    if(a == b){
        console.log("FAIL");
    }
    else{
        console.log("PASS");
    }
}

{
    let a = {a:"hello"};
    let b = a;

    if(a == b){
        console.log("PASS");
    }
    else{
        console.log("FAIL");
    }
}

{
    let a = [1,2,3];
    let b = a;

    if(a == b){
        console.log("PASS");
    }
    else{
        console.log("FAIL");
    }
}

{
    let a = [1,2,3];
    let b = [1,2,3];

    if(a == b){
        console.log("FAIL");
    }
    else{
        console.log("PASS");
    }
}

//BUG: this prints true true for some reason :(
//SOLVED
{
    let a = false;
    console.log(a ? "true" : "false");
    console.log(a);
}

//BUG: let array:number[] = []
// from Stack overflow: JavaScript arrays aren't really arrays, they're JavaScript 
// objects that have prototype methods that cause them to act like arrays. 
// arr['one'] = 1 is valid JavaScript.
{
    let array:number[] = []
    array[2.5] = 3;
    console.log(array.length);//0
    console.log(array);//[]
    console.log(array[2.5]);//prints 3 because typescript is fucking retarded
}

//BUG: 
// from Stack overflow: JavaScript arrays aren't really arrays, they're JavaScript 
// objects that have prototype methods that cause them to act like arrays. 
// arr['one'] = 1 is valid JavaScript.
{
    let array:number[] = []
    array[2.5] = 3;
    console.log(array.length);//0
    console.log(array);//[]
    console.log(array[2.5]);//prints 3 because typescript is fucking retarded
}

//BUG: ours just says out of bounds and throws error.
//     Stupid typescript fills whatever it needs with nulls
{
    let array:number[] = []
    array[10] = 3;
    console.log(array.length);//0
    console.log(array);//[null, null, null, null, null, null, null, null, null, 3]
    console.log(array[10]);//prints 3 because typescript is fucking retarded
}


//BUG: Typescript doesnt fill the array unless you assign something to the outofbounds index
{
    let array:number[] = []
    console.log(array[10]);
    console.log(array.length);//0
    console.log(array);//[]
    console.log(array[30]);//prints 3 because typescript is fucking retarded
}



//TypeScript is stupid The following doesnt make a any sence
//its fake types
{
    function foo(){
        
        function bar(){
            console.log(a);
        }
        bar();
        var a = 10;
        a = undefined;//Says its an error.
                      //but it prints a as undef.
                      //so a CAN be undef. so weird and dumb
    }
}


//more and more runtime exceptions...
//this is why people dont like javascript
{
    function foo1(){
        
        function bar(){
            console.log(a);
        }
        
        let b = true;
        if(b){
            bar();
        }

        let a = 10;

        if(!b){
            bar();
        }
    }

    foo1();
}

//BUG: we print true in case b is true even tho in ts it throws an error
{
    let a = "Javier";
    function foo2(){
        
        function bar(){
            console.log(a);
        }
        
        let b = true;
        if(b){
            bar();//:think: even with the globa we still get an error here
        }

        let a = 10;//If we remove this let it prints the value of the global 'a' without a problem 

        if(!b){
            bar();
        }
    }

    foo1();
}

{
    console.log(`${ 10 * 2 }`);
    console.log(`This is a big old object\n: ${{name:"Javier", number:10 + 3 * 4 ** 2}}`);
}

//la llamada a la funcion anidada solo tiene acceso a las variables declaradas en el 
//mismo scope en el que la funcion fue definida
//Cuando se llama a una funcion anidada como sabe a que simbolo en los scope usar
{
    function parent1():void{
        function child():void{
            console.log(a);//deberia de decir que a no exis
        }
        child();
        {
            let a = 20;
            child();
        }
    }
}

//BUG: there cannot be templated strings inside one another. because we tokenize the first pair of `
//     with a regex
{
    console.log(`${`${10}`}`);
}

//BUG: no pueden venir comillas dentro de un string, aunque se use el caracter de escape \
//BUG: no pueden venir tildes (`) dentro de un string template aunque se use el caracter de escape \
//BUG: no pueden venir $ dentro de un string template aunque se use el caracter de escape \
{
    let a = `
    console.log(\`\${ 10 * 2 }\`);
    console.log(\`This is a big old object\n: \${{name:"Javier", number:10 + 3 * 4 ** 2}}\`);
    `;
}


//MIGHT BE A FUTURE BUG: si el ` que cierra el string template creo que crashea todo o solo dios sabe que pasa;
// deberia de tirar error sintactico
{
    //let b = `\`;
}

//BUG: if there are braces inside and expression that its inside a comment we completely fuck 
//     our brace counter we use to build the string that will be passed to the expressionParser.
{
    console.log(`Hello this is a string template ${/* evil characters: ` { */ 10}`);
    console.log(`Hello this is a string template ${//Even more evilness: ` {
                10}`);
}

//Unit tests for the stringParserFunction
{
    //console.log(`\`This is a big old object:\\n \${{name:"Javier", n:10 + 3 * 4 ** 2}.n}\\n 10 + 1 * 2 ** 3 = \${10 + 1 * 2 ** 3}\``);
    //stringTemplateParser(`\`This is a big old object:\\n \${{name:"Javier", n:10 + 3 * 4 ** 2}.n}\\n 10 + 1 * 2 ** 3 = \${10 + 1 * 2 ** 3}\``);
}


//OLD BUG:
//las secuencias de escape adentro del traductor no deberian de ser escapadas
{
    console.log("hello: \n Javier");
    console.log(`This is a big old object\n: ${{name:"Javier", number:10 + 3 * 4 ** 2}}`);
}


//BUG:
//Si hay error sintactico al final del archivo, ie llega a EOF antes de llegar a ';'
{
    //Abajo hay un error sintactico que no tiene ';' 
    //console.*^*&
}

//[:think:] Talvez sea mejor que se recupere de errores en el globalInstruction en vez de Statement


//OLD BUG: no da error de tipos en let a:Array<string> = [10];
//     cuando se concatena un array con un string no hace bien la concatenacion, 
//     el toString del array retorna undefined o algo asi
{
    //Array
    console.log("*******************Array********************");
    let myArray:Array<string> = [10];
    let m = myArray + "s";//string
    console.log(m);
    let n = "s" + myArray;//string
    console.log(n);

    //EmptyArray
    console.log("****************EmptyArray*****************");
    let myEmptyArray:Array<string> = [];
    let q = myEmptyArray + "s";//string
    console.log(q);
    let r = "s" + myEmptyArray;//string
    console.log(r);
}

//if the double has a number than is greater than the max integer
//that we can represent accurately in a double but it is still an 
//integer 'unnecessarly' print a wrong value in log_number()
{

}