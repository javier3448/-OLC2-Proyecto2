//BIG BIG BIG BIG TODO: test nested function with variables and all that. (particulary the Env.getVariable)
//We pass all the tests we threw at it so for now we are ok

MEJORA GENERAL: ver como hacer reserves de dynamic arrays en ts 
                y aplicarlo donde sea posible

MEJORA GENERAL: ver como evitar hacer
                array = array.concat
                para no hacer mallocs innecesarios

MEJORA GENERAL: Todo lo que es codigo generado automaticamente (funciones 
                nativas, temporales reservados, etc) lo deberiamos de meter en 
                structs y arrays bonitos en vez de tenerlo todo en un string 
                quemado que mantenemos a mano

BIG TODO:
MEJORA GENERAL: Que los errores de compilacion tengan mejor definidos los tipos
                de errores que son posibles (ejemplo: error de tipos, const no inicializada, etc)

BIG TODO
BIG MEJORA GENERAL:
    Los temps no tienen porque ser Strings, de veras, especialmente ahora que tenemos
    que pasar por todas partes un owedTemps. Ahi hay DOS niveles de heap innecesario :(


Tiene que existir una manera de resolver lo de los owed temps sin tener que 
hacer montones de copias de arreglos bien similares


MEJORA GENERAL: Que los MyType pueda tener void en la gramatica tambien y poner asserts para
                asegurarnos de que las cosas que no puedan tener void tirar error si alguien
                las trata de poner con void


TODO: documentar el layout de los parametros para una nested function (que los primeros n parametros estan        
      reservados para stackframes de ancestros)


BIG BIG TODO: hacer un dibujito ASCII que muestre y explique exactamente el layout del los stack frame
              con ejemplos y todo y que tenga en cuenta tambien los Scopes que NO son globales o function_scope

TODO: un dibujo ascii que explique porque y como tienen que correr todas las declaraciones de una funcion o 
      del scope global antes de poder generar mas c_ir


the biggest perfs hits (just a guess): the way we concant c_ir 
                        the way we handle the owedTemps we make tons extra arrays
                        using a linked list for the StackOfScopes


TODO: limpear los comentarios y poner aqui los que se repiten mucho y son importantes

BUG: Nuestro switch accepta cualquier tipo, no solo boolean y number

MEJORA: Environment needs quite a bit of rework now that we know how the global and the nested functions 
        work.


TODO: que sea case insensitive

TODO: recuperarse de errores sintacticos?

MEJORA: clean up the switches, put things in different functions when its appropiate

MEJORA?????: We are not consistent when we compare types, sometimes we use the function
             other times we just take the .kind ourselfs and compare it


TODO: quitar constExpr o ver si siquiera lo usamos

//MEJORA: We could do the boolean expr evaluation optimizations described in the dragon
//        book near section 6.6.5 in some easy cases like:
//        while(HERE) for(;HERE;) ... etc


TODO: when we finally implement the case insensitive thing we have to go through
      every comparisson we did between strings and see if we need to make it a case 
      insensitive comparason

PELIGRO:
TODO: revisar que cada vez que agregemos cosas al owedTemps creemos un nuevo arreglo


MEJORA: 
para no tener que hacer un if cada vez que agregamos a un owed temps hacer una funcion
que solita chequee si es instance of String hace un nuevo owedTemps y lo agrega
de lo contrario solo retornar el mismo owedTemps

HERE HERE HERE

TODO: leer de nuevo todo el proyecto antes de entregar
CHECK IF WE *HAVE* TO RECOVER FROM SYNTAX ERRORS
TODO: Parece que compila el c aunque tenga el error: conflicting types, cuando llamamos
      una func antes de definirla. pero igual hay que ponder en el header todas las declaraciones
      de funciones, podriamos hacer una lista de string global con los realnames o algo asi, no se :(
TODO: QUE LOS MENSAJES DE ERROR SI TENGAN KIND
TODO: hacer un regresion testing con TODOS los archivos de entrada que tengamos
TODO TODO TODO: HOYYYYYY Hacer un buen deploy
TODO: Quitar todo lo marcado con 'debug'

!!!!!!!!!!!!!!!!!!!
BIG BIG BIG TODO:
NO POEMOS HACER ASIGNACIONES 'MEM = MEM'
CORREGIR TODO CODIGO GENERADO QUE HAGA ESO (Buscar Mem. ...)
Y EL CODIGO NATIVO QUE HAGA ESO TAMBIEN!!!! (poner un monton de _nativeTemp y ya)
IDEA: para el clavo que tenemos que debemos usar temps aux para acceder al stack y al heap
      poner que _3addrIns solo pueda Temps (String) no memoria (Mem)
IDEA: para la limitacion de acceso a mem: solo hacer mucho muchos temps.
      no ponerles nombre, cada vez que necesitemos uno hacer getNextTemp y ponerlo
      en una var con nombre temp1
[!]:
solo asi podemos acceder a heap/stack
Temp = Heap[Temp|imm]
heap[Temp|imm] = Temp

END HERE HERE HERE

//TODO: ver que tan grandes puede ser el stack y el heap y ver que tantos temps
//      podemos tener realmente
// hasta ahora no hemos tenido ningun problema con es

//BIG TODO: correr todos los archivos de entrada del proyecto pasado y revisar con la hoja de calificacion a la mano
//ya lo hicimos todos funcionan :D

FIX THIS ERROR:
No script tag of type "javascript/worker" was found and "useWorker" is true. Not using web worker.
I dont even know if it matter at all :(


TODO: mas pruebas para los errores y talvez hasta mas failing tests

MEJORA: incosistencent names between properties and attributes

TODO: better error message when we get an type error between customs:
      'Tipos no compatibles en declaracion: 'A y 'anonymous'. Se utilizara el valor default del tipo: A'
      is not a good enough message

MEJORA GENERAL: usar 'instance of' en vez de un enum emparejado con un 'specification'


MEJORA: there is a couple of places where we need to catch exceptions in a bunch of different branches
        see if we can make a bigger try catch, that covers them all, that way we only use 1 try catch
        example: declarationPrepass


BIG MEJORA: que el compileFor use la tecnica que usamos en el forOf para hacerle push
            y pop a los scope sin tener que pensar mucho en que tira MyError y que no

