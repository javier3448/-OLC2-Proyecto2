/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var CompilerParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,37],$V2=[1,30],$V3=[1,27],$V4=[1,20],$V5=[1,10],$V6=[1,11],$V7=[1,13],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,28],$Vc=[1,25],$Vd=[1,26],$Ve=[1,29],$Vf=[1,31],$Vg=[1,32],$Vh=[1,38],$Vi=[1,23],$Vj=[1,22],$Vk=[1,33],$Vl=[1,34],$Vm=[1,35],$Vn=[1,36],$Vo=[1,39],$Vp=[5,12,13,14,19,26,35,36,38,44,45,46,47,49,51,53,58,59,64,67,78,84,85,86,87,90],$Vq=[1,63],$Vr=[1,51],$Vs=[1,53],$Vt=[1,65],$Vu=[1,45],$Vv=[1,46],$Vw=[1,47],$Vx=[1,48],$Vy=[1,49],$Vz=[1,50],$VA=[1,52],$VB=[1,54],$VC=[1,55],$VD=[1,56],$VE=[1,57],$VF=[1,58],$VG=[1,59],$VH=[1,60],$VI=[1,62],$VJ=[1,64],$VK=[5,12,13,14,19,21,26,35,36,38,44,45,46,47,49,51,53,56,57,58,59,64,67,78,84,85,86,87,90],$VL=[1,74],$VM=[13,16,17,21,25,27,31,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,82,94],$VN=[2,11],$VO=[2,111],$VP=[1,90],$VQ=[2,124],$VR=[1,121],$VS=[13,16,17,21,25,27,31,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,82],$VT=[13,21],$VU=[13,14,19,21,35,36,38,44,45,46,47,49,51,53,58,59,64,67,78,84,85,86,87,90],$VV=[1,131],$VW=[16,25,65],$VX=[13,16,17,21,25,27,31,62,63,65,66,67,72,73,74,75,76,77,82],$VY=[13,16,17,21,25,27,31,62,63,65,66,67,68,69,70,72,73,74,75,76,77,82],$VZ=[13,16,17,21,25,27,31,65,74,75,76,77,82],$V_=[1,151],$V$=[1,156],$V01=[1,153],$V11=[1,154],$V21=[1,155],$V31=[1,157],$V41=[2,70],$V51=[1,177],$V61=[13,16],$V71=[1,182],$V81=[2,73],$V91=[1,183],$Va1=[13,16,19,21,25,27,31,50,52,63,64],$Vb1=[1,185],$Vc1=[2,75],$Vd1=[13,14,19,21,35,36,38,44,45,46,47,49,51,53,56,57,58,59,64,67,78,84,85,86,87,90],$Ve1=[2,18],$Vf1=[5,12,13,14,19,21,26,35,36,38,44,45,46,47,49,51,53,58,59,64,67,78,84,85,86,87,90];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"GlobalInstructions_":4,"EOF":5,"GlobalInstructions":6,"Statement":7,"TypeDef":8,"FunctionDef":9,"StatementList_":10,"StatementList":11,"FUNCTION":12,"IDENTIFIER":13,"(":14,"ParamList_":15,")":16,":":17,"Type":18,"{":19,"FunctionInstructionList_":20,"}":21,"VOID":22,"ParamList":23,"Param":24,",":25,"TYPE":26,"=":27,"AttributeList_":28,"AttributeList":29,"Attribute":30,";":31,"Expression":32,"Declaration":33,"Block":34,"WHILE":35,"DO":36,"IfStatement":37,"FOR":38,"ExpressionOrDeclaration_":39,"Expression_":40,"ForOfStatement":41,"ForInStatement":42,"SwitchStatement":43,"BREAK":44,"CONTINUE":45,"RETURN":46,"IF":47,"ELSE":48,"LET":49,"OF":50,"CONST":51,"IN":52,"SWITCH":53,"SwitchInstructions_":54,"SwitchInstructions":55,"CASE":56,"DEFAULT":57,"NUMBER":58,"STRING":59,"BOOLEAN":60,"ARRAY":61,"<":62,">":63,"[":64,"]":65,"+":66,"-":67,"*":68,"/":69,"%":70,"**":71,"<=":72,">=":73,"==":74,"!=":75,"||":76,"&&":77,"!":78,"++":79,"--":80,"MemberAccess":81,"?":82,"F":83,"TRUE":84,"FALSE":85,"NULL":86,"UNDEFINED":87,"ExpressionList_":88,"PropertyList":89,"NEW":90,"PropertyList_":91,"Property":92,"ExpressionList":93,".":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"FUNCTION",13:"IDENTIFIER",14:"(",16:")",17:":",19:"{",21:"}",22:"VOID",25:",",26:"TYPE",27:"=",31:";",35:"WHILE",36:"DO",38:"FOR",44:"BREAK",45:"CONTINUE",46:"RETURN",47:"IF",48:"ELSE",49:"LET",50:"OF",51:"CONST",52:"IN",53:"SWITCH",56:"CASE",57:"DEFAULT",58:"NUMBER",59:"STRING",60:"BOOLEAN",61:"ARRAY",62:"<",63:">",64:"[",65:"]",66:"+",67:"-",68:"*",69:"/",70:"%",71:"**",72:"<=",73:">=",74:"==",75:"!=",76:"||",77:"&&",78:"!",79:"++",80:"--",82:"?",84:"TRUE",85:"FALSE",86:"NULL",87:"UNDEFINED",90:"NEW",94:"."},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[10,1],[10,0],[11,2],[11,1],[9,10],[9,10],[20,2],[20,2],[20,0],[15,1],[15,0],[23,3],[23,2],[23,2],[23,1],[24,3],[8,6],[28,1],[28,0],[29,3],[29,3],[29,2],[29,2],[29,2],[29,1],[30,3],[7,2],[7,2],[7,1],[7,7],[7,9],[7,1],[7,11],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,3],[37,7],[37,9],[37,9],[41,12],[41,12],[42,12],[42,12],[43,7],[54,1],[54,0],[55,3],[55,2],[55,1],[55,4],[55,3],[55,2],[39,1],[39,1],[39,0],[40,1],[40,0],[34,3],[33,6],[33,4],[33,6],[33,4],[18,1],[18,1],[18,1],[18,1],[18,4],[18,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,2],[32,2],[32,2],[32,2],[32,5],[32,3],[32,1],[83,3],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,4],[83,3],[83,3],[83,5],[91,1],[91,0],[89,3],[89,2],[89,2],[89,1],[92,3],[88,1],[88,0],[93,3],[93,1],[81,5],[81,2],[81,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = $$[$0-1];
        this.$.setAstNode(_$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
        return this.$;
    
break;
case 2: case 10: case 19: case 27: case 41: case 43: case 44: case 45: case 58: case 66: case 69: case 103: case 116: case 123:

        this.$ = $$[$0];
    
break;
case 3:

        this.$ = new GlobalInstructions();
    
break;
case 4:

        this.$.addStatement($$[$0]);
    
break;
case 5:

        this.$.addTypeDef($$[$0]);
    
break;
case 6:

        this.$.addFunctionDef($$[$0]);
    
break;
case 7:

        this.$ = new GlobalInstructions();
        this.$.addStatement($$[$0]);
    
break;
case 8:

        this.$ = new GlobalInstructions();
        this.$.addTypeDef($$[$0]);
    
break;
case 9:

        this.$ = new GlobalInstructions();
        this.$.addFunctionDef($$[$0]);
    
break;
case 11: case 20: case 117: case 124:

        this.$ = new Array();
    
break;
case 12: case 22: case 31: case 65: case 119:

        this.$ = $$[$0-1];
        this.$.push($$[$0]);
    
break;
case 13: case 24: case 34: case 121: case 126:

        this.$ = new Array($$[$0]);
    
break;
case 14:

        this.$ = new FunctionDef($$[$0-8], $$[$0-6], $$[$0-3], $$[$0-1].funcDefs, $$[$0-1].statements, _$[$0-9].first_line, _$[$0-9].first_column, _$[$0-8].last_line, _$[$0-8].last_column);
    
break;
case 15:

        this.$ = new FunctionDef($$[$0-8], $$[$0-6], null, $$[$0-1].funcDefs, $$[$0-1].statements, _$[$0-9].first_line, _$[$0-9].first_column, _$[$0-8].last_line, _$[$0-8].last_column);
    
break;
case 16:

        this.$ = $$[$0];
        if($$[$0-1] !== null){
            this.$.statements.unshift($$[$0-1]);
        }
    
break;
case 17:

        this.$ = $$[$0];
        this.$.funcDefs.unshift($$[$0-1]);
    
break;
case 18:

        this.$ = { funcDefs:[], statements:[]};
    
break;
case 21: case 29: case 30: case 118:

        this.$ = $$[$0-2];
        this.$.push($$[$0-1]);
    
break;
case 23: case 32: case 33: case 120:

        this.$ = new Array($$[$0-1]);
    
break;
case 25:

        this.$ = new ParamNode($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 26:

        this.$ = new TypeDef($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column, _$[$0-4].last_line, _$[$0-4].last_column);
    
break;
case 28:

        new Array();
    
break;
case 35:

        this.$ = new AttributeNode($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 36:

        this.$ = new Statement(StatementKind.ExpressionKind, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 37:

        this.$ = new Statement(StatementKind.DeclarationKind, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 38:

        this.$ = new Statement(StatementKind.BlockKind, $$[$0], _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 39:

        this.$ = new Statement(StatementKind.WhileKind, new WhileStatement($$[$0-4], $$[$0-1]), _$[$0-6].first_line, _$[$0-6].first_column, _$[$0-1].last_line, _$[$0-1].last_column);
    
break;
case 40:

        this.$ = new Statement(StatementKind.DoWhileKind, new DoWhileStatement($$[$0-6], $$[$0-2]), _$[$0-8].first_line, _$[$0-8].first_column, _$[$0-3].last_line, _$[$0-3].last_column);
    
break;
case 42:

        this.$ = new Statement(StatementKind.ForKind, new ForStatement($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]), _$[$0-10].first_line, _$[$0-10].first_column, _$[$0-4].last_line, _$[$0-4].last_column);
    
break;
case 46:

        this.$ = new Statement(StatementKind.BreakKind, null, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 47:

        this.$ = new Statement(StatementKind.ContinueKind, null, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 48:

        this.$ = new Statement(StatementKind.ReturnKind, null, _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 49:

        this.$ = new Statement(StatementKind.ReturnWithValueKind, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 50:

        this.$ = new Statement(StatementKind.IfKind, new IfStatement($$[$0-4], $$[$0-1], null), _$[$0-6].first_line, _$[$0-6].first_column, _$[$0-1].last_line, _$[$0-1].last_column);
    
break;
case 51:

        let blockStatement =  new Statement(StatementKind.BlockKind, $$[$0], _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
        this.$ = new Statement(StatementKind.IfKind, new IfStatement($$[$0-6], $$[$0-3], blockStatement), _$[$0-8].first_line, _$[$0-8].first_column, _$[$0-3].last_line, _$[$0-3].last_column);
    
break;
case 52:

        this.$ = new Statement(StatementKind.IfKind, new IfStatement($$[$0-6], $$[$0-3], $$[$0]), _$[$0-8].first_line, _$[$0-8].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 53:

        //ForOfStatement(isConst, id, MyType, iterableExpression, statements)
        this.$ = new Statement(StatementKind.ForOfKind, new ForOfStatement(false, $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]), _$[$0-11].first_line, _$[$0-11].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 54:

        //ForOfStatement(isConst, id, MyType, iterableExpression, statements)
        this.$ = new Statement(StatementKind.ForOfKind, new ForOfStatement(true, $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]), _$[$0-11].first_line, _$[$0-11].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 55:

        this.$ = new Statement(StatementKind.ForInKind, new ForInStatement(false, $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]), _$[$0-11].first_line, _$[$0-11].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 56:

        this.$ = new Statement(StatementKind.ForInKind, new ForInStatement(true, $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]), _$[$0-11].first_line, _$[$0-11].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 57:

        this.$ = new Statement(StatementKind.SwitchKind, new SwitchStatement($$[$0-4], $$[$0-1]), _$[$0-6].first_line, _$[$0-6].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 59:

        this.$ = new SwitchInstructions([],[],[]);
    
break;
case 60:

        this.$ = [new SwitchCase($$[$0-1])];
    
break;
case 61:

        this.$ = [new SwitchDefault()];
    
break;
case 62:

        this.$ = [$$[$0]];
    
break;
case 63:

        this.$ = $$[$0-3];
        this.$.push(new SwitchCase($$[$0-1]));
    
break;
case 64:

        this.$ = $$[$0-2];
        this.$.push(new SwitchDefault($$[$0]));
    
break;
case 67:

        this.$ = new Statement(StatementKind.DeclarationKind, $$[$0], _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 68: case 70:

        this.$ = null;
    
break;
case 71:

        this.$ = new AstBlock($$[$0-1]);
    
break;
case 72:

        this.$ = new Declaration(false, $$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 73:

        this.$ = new Declaration(false, $$[$0-2], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 74:

        this.$ = new Declaration(true, $$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 75:

        this.$ = new Declaration(true, $$[$0-2], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 76:

        this.$ = MyTypeNode.makeNumberTypeNode(_$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 77:

        this.$ = MyTypeNode.makeStringTypeNode(_$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 78:

        this.$ = MyTypeNode.makeBooleanTypeNode(_$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 79:

        this.$ = MyTypeNode.makeCustomTypeNode($$[$0], _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 80:

        this.$ = MyTypeNode.makeGenericArrayTypeNode($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 81:

        this.$ = MyTypeNode.makeBoxyArrayTypeNode($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 82:

        this.$ = new Expression(ExpressionKind.ADDITION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 83:

        this.$ = new Expression(ExpressionKind.SUBSTRACTION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 84:
 
        this.$ = new Expression(ExpressionKind.MULTIPLICATION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 85:

        this.$ = new Expression(ExpressionKind.DIVISION, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 86:

        this.$ = new Expression(ExpressionKind.MODULUS, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 87:

        this.$ = new Expression(ExpressionKind.POWER, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 88:

        this.$ = new Expression(ExpressionKind.LESS, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 89:

        this.$ = new Expression(ExpressionKind.LESS_OR_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 90:

        this.$ = new Expression(ExpressionKind.GREATER, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 91:

        this.$ = new Expression(ExpressionKind.GREATER_OR_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 92:

        this.$ = new Expression(ExpressionKind.EQUAL_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 93:

        this.$ = new Expression(ExpressionKind.NOT_EQUAL, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 94:

        this.$ = new Expression(ExpressionKind.OR, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 95:

        this.$ = new Expression(ExpressionKind.AND, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 96:

        this.$ = new Expression(ExpressionKind.NOT, new UnaryExpression($$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 97:

        this.$ = new Expression(ExpressionKind.UNARY_MINUS, new UnaryExpression($$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 98:

        this.$ = new Expression(ExpressionKind.POSTFIX_INC, new UnaryExpression($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 99:

        this.$ = new Expression(ExpressionKind.POSTFIX_DEC, new UnaryExpression($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 100:

        this.$ = new Expression(ExpressionKind.MEMBER_ACCESS, new MemberAccessExpression($$[$0-1], $$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 101:

        this.$ = new Expression(ExpressionKind.TERNARY, new TernaryExpression($$[$0-4], $$[$0-2], $$[$0]), _$[$0-4].first_line, _$[$0-4].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 102:

        this.$ = new Expression(ExpressionKind.ASSIGNMENT, new BinaryExpression($$[$0-2], $$[$0]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 104:
 
        //hay que pasar la ubicacion de inicio y final de los ( )
        this.$ = $$[$0-1];
        this.$.first_line = _$[$0-2].first_line;
        this.$.first_column = _$[$0-2].first_column;
        this.$.last_line = _$[$0].last_line;

        this.$.last_column = _$[$0].last_column;
    
break;
case 105:
 
        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new Number($$[$0])), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 106:

        //BAD PERFORMANCE:
        //we are basically doing the lexing two times for every string 
        let s = toStringLiteralBytes($$[$0].slice(1, $$[$0].length - 1));
        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new StringLiteral($$[$0], s)), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 107:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new Boolean(true)), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 108:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(new Boolean(false)), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 109:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(null), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 110:

        this.$ = new Expression(ExpressionKind.LITERAL, new LiteralExpression(undefined), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 111:

        this.$ = new Expression(ExpressionKind.IDENTIFIER, new IdentifierExpression(new String($$[$0])), _$[$0].first_line, _$[$0].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 112:

        this.$ = new Expression(ExpressionKind.FUNCTION_CALL, new FunctionCallExpression(new String($$[$0-3]), $$[$0-1]), _$[$0-3].first_line, _$[$0-3].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 113:

        this.$ = new Expression(ExpressionKind.OBJECT_LITERAL, new ObjectLiteralExpression($$[$0-1]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 114:

        this.$ = new Expression(ExpressionKind.ARRAY_LITERAL, new ArrayLiteralExpression($$[$0-1]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 115:

        this.$ = new Expression(ExpressionKind.NEW_ARRAY, new NewArrayExpression($$[$0-1]), _$[$0-4].first_line, _$[$0-4].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 122:

        this.$ = new PropertyNode($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 125:

        this.$ = $$[$0-2];
        this.$.push($$[$0]);
    
break;
case 127:

        this.$ = new MemberAccess(AccessKind.FunctionAccess, new FunctionAccess($$[$0-3], $$[$0-1]), _$[$0-4].first_line, _$[$0-4].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 128:

        this.$ = new MemberAccess(AccessKind.AttributeAccess, new AttributeAccess($$[$0]), _$[$0-1].first_line, _$[$0-1].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
case 129:

        this.$ = new MemberAccess(AccessKind.IndexAccess, new IndexAccess($$[$0-1]), _$[$0-2].first_line, _$[$0-2].first_column, _$[$0].last_line, _$[$0].last_column);
    
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,12:$V0,13:$V1,14:$V2,19:$V3,26:$V4,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{1:[3]},{5:[1,40]},{5:[2,2],7:41,8:42,9:43,12:$V0,13:$V1,14:$V2,19:$V3,26:$V4,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},o($Vp,[2,7]),o($Vp,[2,8]),o($Vp,[2,9]),{27:$Vq,31:[1,44],62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{31:[1,66]},o($VK,[2,38]),{14:[1,67]},{19:[1,68]},o($VK,[2,41]),{14:[1,69]},o($VK,[2,43]),o($VK,[2,44]),o($VK,[2,45]),{31:[1,70]},{31:[1,71]},{13:$V1,14:$V2,19:$VL,31:[1,72],32:73,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:[1,75]},{13:[1,76]},{13:$V1,14:$V2,19:$VL,32:77,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:78,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},o($VM,[2,103]),{13:[1,79]},{13:[1,80]},{7:85,10:81,11:83,13:[1,86],14:$V2,19:$V3,21:$VN,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,89:82,90:$Vo,92:84},{14:[1,87]},{14:[1,88]},{13:$V1,14:$V2,19:$VL,32:89,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},o($VM,[2,105]),o($VM,[2,106]),o($VM,[2,107]),o($VM,[2,108]),o($VM,[2,109]),o($VM,[2,110]),o($VM,$VO,{14:$VP}),{13:$V1,14:$V2,19:$VL,32:93,58:$Vf,59:$Vg,64:$Vh,65:$VQ,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:91,90:$Vo,93:92},{61:[1,94]},{1:[2,1]},o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,[2,6]),o($VK,[2,36]),{13:$V1,14:$V2,19:$VL,32:95,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:96,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:97,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:98,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:99,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:100,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:101,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:102,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:103,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:104,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:105,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:106,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:107,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:108,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},o($VM,[2,98]),o($VM,[2,99]),o($VM,[2,100]),{13:$V1,14:$V2,19:$VL,32:109,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:110,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:[1,111]},{13:$V1,14:$V2,19:$VL,32:112,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},o($VK,[2,37]),{13:$V1,14:$V2,19:$VL,32:113,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{7:85,10:114,11:83,13:$V1,14:$V2,19:$V3,21:$VN,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,31:[2,68],32:118,33:119,39:115,49:[1,116],51:[1,117],58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},o($VK,[2,46]),o($VK,[2,47]),o($VK,[2,48]),{27:$Vq,31:[1,120],62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{13:$VR,89:82,92:84},{27:[1,122]},{14:[1,123]},o($VS,[2,96],{81:61,64:$Vt,79:$VG,80:$VH,94:$VJ}),o($VS,[2,97],{81:61,64:$Vt,79:$VG,80:$VH,94:$VJ}),{17:[1,124]},{17:[1,125]},{21:[1,126]},{13:$VR,21:[1,127],92:128},{7:129,13:$V1,14:$V2,19:$V3,21:[2,10],32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},o($VT,[2,121],{25:[1,130]}),o($VU,[2,13]),o([27,31,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,79,80,82,94],$VO,{14:$VP,17:$VV}),{13:$V1,14:$V2,19:$VL,32:132,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:133,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{16:[1,134],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{13:$V1,14:$V2,16:$VQ,19:$VL,32:93,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:135,90:$Vo,93:92},{65:[1,136]},o([16,65],[2,123],{25:[1,137]}),o($VW,[2,126],{81:61,27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,82:$VI,94:$VJ}),{14:[1,138]},o($VX,[2,82],{81:61,64:$Vt,68:$Vw,69:$Vx,70:$Vy,71:$Vz,79:$VG,80:$VH,94:$VJ}),o($VX,[2,83],{81:61,64:$Vt,68:$Vw,69:$Vx,70:$Vy,71:$Vz,79:$VG,80:$VH,94:$VJ}),o($VY,[2,84],{81:61,64:$Vt,71:$Vz,79:$VG,80:$VH,94:$VJ}),o($VY,[2,85],{81:61,64:$Vt,71:$Vz,79:$VG,80:$VH,94:$VJ}),o($VY,[2,86],{81:61,64:$Vt,71:$Vz,79:$VG,80:$VH,94:$VJ}),o($VY,[2,87],{81:61,64:$Vt,71:$Vz,79:$VG,80:$VH,94:$VJ}),o($VZ,[2,88],{81:61,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,79:$VG,80:$VH,94:$VJ}),o($VZ,[2,89],{81:61,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,79:$VG,80:$VH,94:$VJ}),o($VZ,[2,90],{81:61,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,79:$VG,80:$VH,94:$VJ}),o($VZ,[2,91],{81:61,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,79:$VG,80:$VH,94:$VJ}),o($VZ,[2,92],{81:61,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,79:$VG,80:$VH,94:$VJ}),o($VZ,[2,93],{81:61,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,79:$VG,80:$VH,94:$VJ}),o([13,16,17,21,25,27,31,65,76,82],[2,94],{81:61,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VF,79:$VG,80:$VH,94:$VJ}),o([13,16,17,21,25,27,31,65,76,77,82],[2,95],{81:61,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,79:$VG,80:$VH,94:$VJ}),{17:[1,139],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},o([13,16,17,21,25,31,65],[2,102],{81:61,27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,82:$VI,94:$VJ}),o($VM,[2,128],{14:[1,140]}),{27:$Vq,62:$Vr,63:$Vs,64:$Vt,65:[1,141],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{16:[1,142],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{21:[1,143]},{31:[1,144]},{13:[1,145]},{13:[1,146]},{27:$Vq,31:[2,66],62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{31:[2,67]},o($VK,[2,49]),{17:$VV},{19:[1,147]},{13:$V_,15:148,16:[2,20],23:149,24:150},{13:$V$,18:152,58:$V01,59:$V11,60:$V21,61:$V31},{13:$V$,18:158,58:$V01,59:$V11,60:$V21,61:$V31},o($VK,[2,71]),o($VM,[2,113]),o($VT,[2,119],{25:[1,159]}),o($VU,[2,12]),o($VT,[2,120]),{13:$V1,14:$V2,19:$VL,32:160,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{16:[1,161],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{16:[1,162],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},o($VM,[2,104]),{16:[1,163]},o($VM,[2,114]),{13:$V1,14:$V2,19:$VL,32:164,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:165,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:166,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,16:$VQ,19:$VL,32:93,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:167,90:$Vo,93:92},o($VM,[2,129]),{19:[1,168]},{35:[1,169]},{13:$V1,14:$V2,19:$VL,31:$V41,32:171,40:170,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{17:[1,172]},{17:[1,173]},{13:$V51,21:[2,28],28:174,29:175,30:176},{16:[1,178]},{13:$V_,16:[2,19],24:179},o($V61,[2,24],{25:[1,180]}),{17:[1,181]},{27:$V71,31:$V81,64:$V91},o($Va1,[2,76]),o($Va1,[2,77]),o($Va1,[2,78]),o($Va1,[2,79]),{62:[1,184]},{27:$Vb1,31:$Vc1,64:$V91},o($VT,[2,118]),o([13,21,25],[2,122],{81:61,27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,82:$VI,94:$VJ}),{19:[1,186]},{19:[1,187]},o($VM,[2,112]),o($VW,[2,125],{81:61,27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,82:$VI,94:$VJ}),{16:[1,188],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},o([13,16,17,21,25,27,31,65],[2,101],{81:61,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,82:$VI,94:$VJ}),{16:[1,189]},{7:85,10:190,11:83,13:$V1,14:$V2,19:$V3,21:$VN,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{14:[1,191]},{31:[1,192]},o([16,31],[2,69],{81:61,27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,82:$VI,94:$VJ}),{13:$V$,18:193,58:$V01,59:$V11,60:$V21,61:$V31},{13:$V$,18:194,58:$V01,59:$V11,60:$V21,61:$V31},{21:[1,195]},{13:$V51,21:[2,27],30:196},o($VT,[2,34],{25:[1,198],31:[1,197]}),{17:[1,199]},{17:[1,200]},o($V61,[2,22],{25:[1,201]}),o($V61,[2,23]),{13:$V$,18:202,58:$V01,59:$V11,60:$V21,61:$V31},{13:$V1,14:$V2,19:$VL,32:203,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{65:[1,204]},{13:$V$,18:205,58:$V01,59:$V11,60:$V21,61:$V31},{13:$V1,14:$V2,19:$VL,32:206,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{7:85,10:207,11:83,13:$V1,14:$V2,19:$V3,21:$VN,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{7:212,13:$V1,14:$V2,19:$V3,21:[2,59],32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,54:208,55:209,56:[1,210],57:[1,211],58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},o($VM,[2,115]),o($VM,[2,127]),{21:[1,213]},{13:$V1,14:$V2,19:$VL,32:214,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,16:$V41,19:$VL,32:171,40:215,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{27:$V71,31:$V81,50:[1,216],52:[1,217],64:$V91},{27:$Vb1,31:$Vc1,50:[1,218],52:[1,219],64:$V91},o($Vp,[2,26]),o($VT,[2,31],{25:[1,220],31:[1,221]}),o($VT,[2,32]),o($VT,[2,33]),{13:$V$,18:222,58:$V01,59:$V11,60:$V21,61:$V31},{13:$V$,18:223,22:[1,224],58:$V01,59:$V11,60:$V21,61:$V31},o($V61,[2,21]),o([13,16,25],[2,25],{64:$V91}),{27:$Vq,31:[2,72],62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},o($Va1,[2,81]),{63:[1,225],64:$V91},{27:$Vq,31:[2,74],62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{21:[1,226]},{21:[1,227]},{7:230,13:$V1,14:$V2,19:$V3,21:[2,58],32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,56:[1,228],57:[1,229],58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:231,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{17:[1,232]},o($Vd1,[2,62]),o($VK,[2,39]),{16:[1,233],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{16:[1,234]},{13:$V1,14:$V2,19:$VL,32:235,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:236,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:237,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{13:$V1,14:$V2,19:$VL,32:238,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},o($VT,[2,29]),o($VT,[2,30]),o([13,21,25,31],[2,35],{64:$V91}),{19:[1,239],64:$V91},{19:[1,240]},o($Va1,[2,80]),o($VK,[2,50],{48:[1,241]}),o($VK,[2,57]),{13:$V1,14:$V2,19:$VL,32:242,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{17:[1,243]},o($Vd1,[2,65]),{17:[1,244],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},o($Vd1,[2,61]),{31:[1,245]},{19:[1,246]},{16:[1,247],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{16:[1,248],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{16:[1,249],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{16:[1,250],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},{7:252,9:253,12:$V0,13:$V1,14:$V2,19:$V3,20:251,21:$Ve1,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{7:252,9:253,12:$V0,13:$V1,14:$V2,19:$V3,20:254,21:$Ve1,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{19:[1,257],34:255,37:256,47:$Vb},{17:[1,258],27:$Vq,62:$Vr,63:$Vs,64:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,79:$VG,80:$VH,81:61,82:$VI,94:$VJ},o($Vd1,[2,64]),o($Vd1,[2,60]),o($VK,[2,40]),{7:85,10:259,11:83,13:$V1,14:$V2,19:$V3,21:$VN,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{19:[1,260]},{19:[1,261]},{19:[1,262]},{19:[1,263]},{21:[1,264]},{7:252,9:253,12:$V0,13:$V1,14:$V2,19:$V3,20:265,21:$Ve1,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{7:252,9:253,12:$V0,13:$V1,14:$V2,19:$V3,20:266,21:$Ve1,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{21:[1,267]},o($VK,[2,51]),o($VK,[2,52]),{7:85,10:81,11:83,13:$V1,14:$V2,19:$V3,21:$VN,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},o($Vd1,[2,63]),{21:[1,268]},{7:85,10:269,11:83,13:$V1,14:$V2,19:$V3,21:$VN,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{7:85,10:270,11:83,13:$V1,14:$V2,19:$V3,21:$VN,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{7:85,10:271,11:83,13:$V1,14:$V2,19:$V3,21:$VN,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},{7:85,10:272,11:83,13:$V1,14:$V2,19:$V3,21:$VN,32:7,33:8,34:9,35:$V5,36:$V6,37:12,38:$V7,41:14,42:15,43:16,44:$V8,45:$V9,46:$Va,47:$Vb,49:$Vc,51:$Vd,53:$Ve,58:$Vf,59:$Vg,64:$Vh,67:$Vi,78:$Vj,83:24,84:$Vk,85:$Vl,86:$Vm,87:$Vn,90:$Vo},o($Vf1,[2,14]),{21:[2,16]},{21:[2,17]},o($Vf1,[2,15]),o($VK,[2,42]),{21:[1,273]},{21:[1,274]},{21:[1,275]},{21:[1,276]},o($VK,[2,53]),o($VK,[2,55]),o($VK,[2,54]),o($VK,[2,56])],
defaultActions: {40:[2,1],119:[2,67],265:[2,16],266:[2,17]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Expression, ExpressionKind, 
    UnaryExpression, BinaryExpression, TernaryExpression, LiteralExpression, StringLiteral,
    IdentifierExpression, FunctionCallExpression, MemberAccessExpression, 
    PropertyNode, ObjectLiteralExpression, ArrayLiteralExpression,
    NewArrayExpression } = require('../Ast/Expression');
    const { MemberAccess, AccessKind, FunctionAccess, IndexAccess, AttributeAccess } = require('../Ast/MemberAccess');
    const { Statement, StatementKind, AstBlock, 
            WhileStatement, DoWhileStatement, IfStatement, 
            ForStatement, ForOfStatement, ForInStatement, 
            SwitchStatement, SwitchCase, SwitchDefault, 
            SwitchInstruction } = require('../Ast/Statement');
    const { AssignmentNode } = require('../Ast/AssignmentNode');
    const { Declaration } = require('../Ast/Declaration');
    const { MyTypeNode, MyTypeNodeKind } = require('../Ast/MyTypeNode');
    const { GlobalInstructions } = require('../Ast/GlobalInstructions');
    const { TypeDef, AttributeNode } = require('../Ast/TypeDef');
    const { FunctionDef, ParamNode } = require('../Ast/FunctionDef');
    const { MyError } = require('../Compiler/MyError');
    const { toStringLiteralBytes } = require('./ParserHelper');
    //const {Literal} = require('../Expression/Literal');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 84
break;
case 4:return 85
break;
case 5:return 87
break;
case 6:return 86
break;
case 7:return 26
break;
case 8:return 90
break;
case 9:return 61
break;
case 10:return 12
break;
case 11:return 35
break;
case 12:return 36
break;
case 13:return 47
break;
case 14:return 48
break;
case 15:return 53
break;
case 16:return 56
break;
case 17:return 57
break;
case 18:return 38
break;
case 19:return 'FORIN'
break;
case 20:return 52
break;
case 21:return 50
break;
case 22:return 44
break;
case 23:return 45
break;
case 24:return 46
break;
case 25:return 76
break;
case 26:return 77
break;
case 27:return 74
break;
case 28:return 75
break;
case 29:return 73
break;
case 30:return 72
break;
case 31:return 63
break;
case 32:return 62
break;
case 33:return 79
break;
case 34:return 80
break;
case 35:return 66
break;
case 36:return 67
break;
case 37:return 71
break;
case 38:return 68
break;
case 39:return 69
break;
case 40:return 70
break;
case 41:return 78
break;
case 42:return 14
break;
case 43:return 16
break;
case 44:return 27
break;
case 45:return 94
break;
case 46:return 64
break;
case 47:return 65
break;
case 48:return 49
break;
case 49:return 51
break;
case 50:return 58
break;
case 51:return 59
break;
case 52:return 60
break;
case 53:return 22
break;
case 54:return 25
break;
case 55:return 31
break;
case 56:return 19
break;
case 57:return 21
break;
case 58:return 17
break;
case 59:return 82
break;
case 60:return '~'
break;
case 61:return 5
break;
case 62:return 58
break;
case 63:return 13
break;
case 64:return 59
break;
case 65:return 59
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:new\b)/,/^(?:Array\b)/,/^(?:function\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:forin\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:=)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:let\b)/,/^(?:const\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:\?)/,/^(?:~)/,/^(?:$)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:("[^"]*"))/,/^(?:('[^']*'))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = CompilerParser;
exports.Parser = CompilerParser.Parser;
exports.parse = function () { return CompilerParser.parse.apply(CompilerParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}